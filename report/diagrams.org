#+BEGIN_SRC plantuml :file auth.png
Client -> AuthServ: (username, password)
AuthServ -> AuthServ: LookupDetails()
AuthServ -> Client: Valid
AuthServ -> AuthServ: Generate 256 byte random token
AuthServ -> AuthServ: rsaSign(token)
AuthServ -> Client: signedToken
#+END_SRC

#+RESULTS:
[[file:auth.png]]


#+BEGIN_SRC plantuml :file caching.png
Client -> dirServer: get("filename")
dirServer -> Client: fileserverIP
Client -> fileServer: getFileHash(filename)
fileServer -> Client: fileHash
Client -> Client: fileHash == localFileHash ??

#+END_SRC

#+RESULTS:
[[file:caching.png]]


#+BEGIN_SRC plantuml :file lock.png
Client -> lockServer: lock("filename")
lockServer -> Client: file is locked
SecondClient -> lockServer: lock("filename")
lockServer -> SecondClient: Error: file is already locked
Client -> lockServer: unlock("filename")
lockServer -> Client: file is unlocked

#+END_SRC

#+RESULTS:
[[file:lock.png]]

#+BEGIN_SRC plantuml :file replication.png
Client -> fileServer: put(file)
fileServerA -> Client: OK
fileServerA -> dirServer: get all fileServers with file
dirServer -> fileServerA: [fileServers]
fileServerA -> fileServerB: gossip: fileA:versionX
fileServerB -> fileServerA: My fileA is out of date, get(fileA)
fileServerA -> fileServerB: fileA 
' similarly for the other fileServers provided


#+END_SRC
